// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sdk.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 排序方向
type SortDirection int32

const (
	SortDirection_Asc  SortDirection = 0
	SortDirection_Desc SortDirection = 1
)

var SortDirection_name = map[int32]string{
	0: "Asc",
	1: "Desc",
}

var SortDirection_value = map[string]int32{
	"Asc":  0,
	"Desc": 1,
}

func (x SortDirection) String() string {
	return proto.EnumName(SortDirection_name, int32(x))
}

func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_70decb0fb6f436df, []int{0}
}

// 按limit分页
type LimitParam struct {
	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (m *LimitParam) Reset()         { *m = LimitParam{} }
func (m *LimitParam) String() string { return proto.CompactTextString(m) }
func (*LimitParam) ProtoMessage()    {}
func (*LimitParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_70decb0fb6f436df, []int{0}
}
func (m *LimitParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitParam.Merge(m, src)
}
func (m *LimitParam) XXX_Size() int {
	return m.Size()
}
func (m *LimitParam) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitParam.DiscardUnknown(m)
}

var xxx_messageInfo_LimitParam proto.InternalMessageInfo

func (m *LimitParam) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *LimitParam) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// 按last primary key分页
type NextParam struct {
	LastPk    int64         `protobuf:"varint,1,opt,name=lastPk,proto3" json:"lastPk,omitempty"`
	PageSize  int64         `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Direction SortDirection `protobuf:"varint,3,opt,name=direction,proto3,enum=hdsdk.protobuf.SortDirection" json:"direction,omitempty"`
}

func (m *NextParam) Reset()         { *m = NextParam{} }
func (m *NextParam) String() string { return proto.CompactTextString(m) }
func (*NextParam) ProtoMessage()    {}
func (*NextParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_70decb0fb6f436df, []int{1}
}
func (m *NextParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextParam.Merge(m, src)
}
func (m *NextParam) XXX_Size() int {
	return m.Size()
}
func (m *NextParam) XXX_DiscardUnknown() {
	xxx_messageInfo_NextParam.DiscardUnknown(m)
}

var xxx_messageInfo_NextParam proto.InternalMessageInfo

func (m *NextParam) GetLastPk() int64 {
	if m != nil {
		return m.LastPk
	}
	return 0
}

func (m *NextParam) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *NextParam) GetDirection() SortDirection {
	if m != nil {
		return m.Direction
	}
	return SortDirection_Asc
}

func init() {
	proto.RegisterEnum("hdsdk.protobuf.SortDirection", SortDirection_name, SortDirection_value)
	proto.RegisterType((*LimitParam)(nil), "hdsdk.protobuf.LimitParam")
	proto.RegisterType((*NextParam)(nil), "hdsdk.protobuf.NextParam")
}

func init() { proto.RegisterFile("sdk.proto", fileDescriptor_70decb0fb6f436df) }

var fileDescriptor_70decb0fb6f436df = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x4e, 0xc9, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcb, 0x48, 0x81, 0x73, 0x92, 0x4a, 0xd3, 0x94, 0x6c,
	0xb8, 0xb8, 0x7c, 0x32, 0x73, 0x33, 0x4b, 0x02, 0x12, 0x8b, 0x12, 0x73, 0x85, 0x84, 0xb8, 0x58,
	0x0a, 0x12, 0xd3, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0xc0, 0x6c, 0x21, 0x29, 0x2e,
	0x0e, 0x10, 0x1d, 0x9c, 0x59, 0x95, 0x2a, 0xc1, 0x04, 0x16, 0x87, 0xf3, 0x95, 0x6a, 0xb8, 0x38,
	0xfd, 0x52, 0x2b, 0xa0, 0x9a, 0xc5, 0xb8, 0xd8, 0x72, 0x12, 0x8b, 0x4b, 0x02, 0xb2, 0xa1, 0xda,
	0xa1, 0x3c, 0x7c, 0x06, 0x08, 0x59, 0x73, 0x71, 0xa6, 0x64, 0x16, 0xa5, 0x26, 0x97, 0x64, 0xe6,
	0xe7, 0x49, 0x30, 0x2b, 0x30, 0x6a, 0xf0, 0x19, 0xc9, 0xea, 0xa1, 0x3a, 0x51, 0x2f, 0x38, 0xbf,
	0xa8, 0xc4, 0x05, 0xa6, 0x28, 0x08, 0xa1, 0x5e, 0x4b, 0x89, 0x8b, 0x17, 0x45, 0x4e, 0x88, 0x9d,
	0x8b, 0xd9, 0xb1, 0x38, 0x59, 0x80, 0x41, 0x88, 0x83, 0x8b, 0xc5, 0x25, 0xb5, 0x38, 0x59, 0x80,
	0xd1, 0xc9, 0xf2, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c,
	0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xe4, 0xd3, 0x33,
	0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x33, 0x52, 0xd2, 0x53, 0x4b, 0xf4, 0xc1,
	0xf6, 0xea, 0xc3, 0xec, 0x4d, 0x62, 0x03, 0xb3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcd,
	0xee, 0xa9, 0xb2, 0x3e, 0x01, 0x00, 0x00,
}

func (m *LimitParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintSdk(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintSdk(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NextParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Direction != 0 {
		i = encodeVarintSdk(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x18
	}
	if m.PageSize != 0 {
		i = encodeVarintSdk(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.LastPk != 0 {
		i = encodeVarintSdk(dAtA, i, uint64(m.LastPk))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSdk(dAtA []byte, offset int, v uint64) int {
	offset -= sovSdk(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LimitParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovSdk(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovSdk(uint64(m.PageSize))
	}
	return n
}

func (m *NextParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastPk != 0 {
		n += 1 + sovSdk(uint64(m.LastPk))
	}
	if m.PageSize != 0 {
		n += 1 + sovSdk(uint64(m.PageSize))
	}
	if m.Direction != 0 {
		n += 1 + sovSdk(uint64(m.Direction))
	}
	return n
}

func sovSdk(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSdk(x uint64) (n int) {
	return sovSdk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LimitParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSdk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSdk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPk", wireType)
			}
			m.LastPk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPk |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= SortDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSdk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSdk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSdk(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSdk
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSdk
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSdk
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSdk
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSdk        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSdk          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSdk = fmt.Errorf("proto: unexpected end of group")
)
